/*jshint esversion: 6 */
/*global fetch, btoa */

"use strict"

import uuid from "uuid/v4";
import { has, includes, assign } from "lodash";

const baseURL = process.env.REACT_APP_NETLIFY_API_URL || ""

function serializeQueryParams(parameters) {
  let str = [];
  for (let p in parameters) {
      if (parameters.hasOwnProperty(p)) {
          str.push(encodeURIComponent(p) + '=' + encodeURIComponent(parameters[p]));
      }
  }
  return str.join('&');
}

function mergeQueryParams(parameters, queryParameters) {
  if (parameters.$queryParameters) {
      Object.keys(parameters.$queryParameters)
            .forEach(function(parameterName) {
                {{#isES6}}let{{/isES6}}{{^isES6}}var{{/isES6}} parameter = parameters.$queryParameters[parameterName];
                queryParameters[parameterName] = parameter;
      });
  }
  return queryParameters;
}

const propagationHeaders = [
    "x-request-id",
    "x-powered-by",
    "x-b3-flags",
    "x-b3-traceid",
    "x-b3-spanid",
    "x-b3-sampled"
]


function processHeaders(headers) {
    let res = {};
    for(let key of headers.keys()) {
        if (includes(propagationHeaders, key)) {
            res[key] = headers.get(key)
        }
    }
    return {headers: res};
}

{{#isSecure}}
    {{#isSecureToken}}
        /**
        * Set Token
        * @method
        * @name {{&className}}#setToken
        * @param {string} value - token's value
        * @param {string} headerOrQueryName - the header or query name to send the token at
        * @param {boolean} isQuery - true if send the token as query param, otherwise, send as header param
        */
        {{&className}}.prototype.setToken = function (value, headerOrQueryName, isQuery) {
            this.token.value = value;
            this.token.headerOrQueryName = headerOrQueryName;
            this.token.isQuery = isQuery;
        };
    {{/isSecureToken}}
    {{#isSecureApiKey}}
        /**
        * Set Api Key
        * @method
        * @name {{&className}}#setApiKey
        * @param {string} value - apiKey's value
        * @param {string} headerOrQueryName - the header or query name to send the apiKey at
        * @param {boolean} isQuery - true if send the apiKey as query param, otherwise, send as header param
        */
        {{&className}}.prototype.setApiKey = function (value, headerOrQueryName, isQuery) {
            this.apiKey.value = value;
            this.apiKey.headerOrQueryName = headerOrQueryName;
            this.apiKey.isQuery = isQuery;
        };
    {{/isSecureApiKey}}
    {{#isSecureBasic}}
        /**
        * Set Basic Auth
        * @method
        * @name {{&className}}#setBasicAuth
        * @param {string} username
        * @param {string} password
        */
        {{&className}}.prototype.setBasicAuth = function (username, password) {
            this.basic.username = value;
            this.basic.password = password;
        };
    {{/isSecureBasic}}
    /**
    * Set Auth headers
    * @method
    * @name {{&className}}#setAuthHeaders
    * @param {object} headerParams - headers object
    */
    {{&className}}.prototype.setAuthHeaders = function (headerParams) {
        let headers = headerParams ? headerParams : {};
    {{#isSecureToken}}
        if (!this.token.isQuery) {
            if (this.token.headerOrQueryName) {
                headers[this.token.headerOrQueryName] = this.token.value;
            } else if (this.token.value) {
                headers['Authorization'] = 'Bearer ' + this.token.value;
            }
        }
    {{/isSecureToken}}
    {{#isSecureApiKey}}
        if (!this.apiKey.isQuery && this.apiKey.headerOrQueryName) {
            headers[this.apiKey.headerOrQueryName] = this.apiKey.value;
        }
    {{/isSecureApiKey}}
    {{#isSecureBasic}}
        if (this.basic.username && this.basic.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.basic.username + ':' + this.basic.password);
        }
    {{/isSecureBasic}}
        return headers;
    };
{{/isSecure}}

{{#methods}}
    {{> method}}
{{/methods}}
